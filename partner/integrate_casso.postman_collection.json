{
	"info": {
		"_postman_id": "56b4e1f9-ca9d-48df-b16a-662101eb1fbd",
		"name": "integrate_casso",
		"description": "#### **Test suite: ingreate casson**\n\nWork flow: [https://sobanhang.larksuite.com/wiki/MTiIw3pAGi5ryzkCh4MucAdjsGe]()\n\n##### Testcase:\n\n1. Create merchant bank account\n    1. Unhappy case: null data\n    2. Unhappy case: wrong partner_code\n    3. Unhappy case: bin_code is not MBBank\n    4. Unhappy case: wrong bank_account_number\n    5. Unhappy case: bank_holder_name is not matching with bank_account_number\n    6. Happy case: partner_merchant_id is existed\n    7. Unhappy case: missing param partner_code\n    8. Unhappy case: missing param bin_code\n    9. Unhappy case: missing param bank_account_number\n    10. Unhappy case: missing param bank_holder_name\n    11. Unhappy case: missing param partner_merchant_id\n    12. HAPPY CASE\n2. Create partner order\n    1. Unhappy case: null data\n    2. Unhappy case: wrong partner_code\n    3. Unhappy case: merchant_bank_account_id is NOT existed\n    4. Unhappy case: amount is negative\n    5. Unhappy case: missing param partner_code\n    6. Unhappy case: missing param merchant_bank_account_id\n    7. Unhappy case: missing param partner_order_id\n    8. Unhappy case: missing param amount\n    9. Happy case: missing param custom_bank_note\n    10. HAPPY CASE\n3. Check order detail after create (Chưa thanh toán)\n4. Get data:\n    1. \\[internal\\] referenceLabelCode\n    2. \\[public\\] hashed signature\n    3. \\[mock\\] Webhook from MBBank (trả 1 phần)\n    4. Check order detail (Thanh toán 1 phần)\n5. hashed signature\n    1. Webhook from MBBank (trả dư)\n    2. Check order detail (Thanh toán dư)\n6. Create new order\n    1. referenceLabelCode\n    2. hashed signature\n    3. Webhook from MBBank (trả đủ)\n    4. Check order detail (Đã thanh toán)\n7. Create new order\n    1. referenceLabelCode\n    2. hashed signature\n    3. Webhook from MBBank (trả dư)\n    4. Check order detail (Thanh toán dư)\n\nNote: phần chưa check được\n\n- **Webhook về phía casso** (đợi phần này hook về lark để check thêm)\n- Schedule job khi hook fail => cần có tool",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "SBH",
			"item": [
				{
					"name": "partner_create_merchant_bank_account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * partner_code: Mã định danh đối tác đã khai báo từ trước với SoBanHang",
									" * partner_merchant_id (not Required): Mã định danh của merchant ở phía partner",
									" * bin_code: Mã định danh ngân hàng",
									" * bank_account_number: Số tài khoản ngân hàng",
									" * bank_holder_name: Tên chủ tài khoản ngân hàng",
									" * Note:",
									" * - Current only support MBBank (7104520894624/ACCOUNT 22550367) - bin_code:970422",
									" */",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!testcase){",
									"    testcase = 1;",
									"    case_ = 1;",
									"    pm.environment.set(\"C-testcase\",testcase);",
									"    pm.environment.set(\"C-case_\",case_);",
									"    console.log(\"--- START TEST INTEGRATE CASSO ---\");",
									"}",
									"console.log(\"testcase: \" + testcase + \".\" + case_);",
									"",
									"let payload = null;",
									"switch(case_){",
									"    case 1:",
									"        console.log(\"create merchant with null data\");",
									"        payload = {",
									"            \"partner_code\": \"\",",
									"            \"partner_merchant_id\": \"\",",
									"            \"bin_code\": \"\",",
									"            \"bank_account_number\": \"\",",
									"            \"bank_holder_name\": \"\"",
									"        }",
									"        break;",
									"    case 2:",
									"        console.log(\"create merchant with wrong partner_code\");",
									"        payload = {",
									"            \"partner_code\": \"cassos\",",
									"            \"partner_merchant_id\": randomChars(8),",
									"            \"bin_code\": \"970422\",",
									"            \"bank_account_number\": \"7104520894624\",",
									"            \"bank_holder_name\": \"ACCOUNT 22550367\"",
									"        }",
									"        break;",
									"    case 3:",
									"        console.log(\"create merchant with bin_code is not MBBank\");",
									"        payload = {",
									"            \"partner_code\": \"Casso\",",
									"            \"partner_merchant_id\": randomChars(8),",
									"            \"bin_code\": \"970426\",",
									"            \"bank_account_number\": \"7104520894624\",",
									"            \"bank_holder_name\": \"ACCOUNT 22550367\"",
									"        }",
									"        break;",
									"    case 4:",
									"        console.log(\"create merchant with wrong bank_account_number\");",
									"        payload = {",
									"            \"partner_code\": \"Casso\",",
									"            \"partner_merchant_id\": randomChars(8),",
									"            \"bin_code\": \"970422\",",
									"            \"bank_account_number\": \"71045208946241\",",
									"            \"bank_holder_name\": \"ACCOUNT 22550367\"",
									"        }",
									"        break;",
									"    case 5:",
									"        console.log(\"create merchant with bank_holder_name is not matching with bank_account_number\");",
									"        payload = {",
									"            \"partner_code\": \"Casso\",",
									"            \"partner_merchant_id\": randomChars(8),",
									"            \"bin_code\": \"970422\",",
									"            \"bank_account_number\": \"7104520894624\",",
									"            \"bank_holder_name\": \"ACCOUNT 22550368\"",
									"        }",
									"        break;",
									"    case 6:",
									"        console.log(\"create merchant with partner_merchant_id is existed\");",
									"        // existed case: don't create new, use the old data merchant_bank_account_id",
									"        payload = {",
									"            \"partner_code\": \"Casso\",",
									"            \"partner_merchant_id\": \"2MtcMuNW\", // 2MtcMuNW: existed partner_merchant_id",
									"            \"bin_code\": \"970422\",",
									"            \"bank_account_number\": \"7104520894624\",",
									"            \"bank_holder_name\": \"ACCOUNT 22550367\"",
									"        }",
									"        break;",
									"    case 7:",
									"        console.log(\"create merchant with missing param partner_code\");",
									"        payload = {",
									"            \"partner_merchant_id\": randomChars(8),",
									"            \"bin_code\": \"970422\",",
									"            \"bank_account_number\": \"7104520894624\",",
									"            \"bank_holder_name\": \"ACCOUNT 22550367\"",
									"        }",
									"        break;",
									"    case 8:",
									"        console.log(\"create merchant with missing param bin_code\");",
									"        payload = {",
									"            \"partner_code\": \"Casso\",",
									"            \"partner_merchant_id\": randomChars(8),",
									"            \"bank_account_number\": \"7104520894624\",",
									"            \"bank_holder_name\": \"ACCOUNT 22550367\"",
									"        }",
									"        break;",
									"    case 9:",
									"        console.log(\"create merchant with missing param bank_account_number\");",
									"        payload = {",
									"            \"partner_code\": \"Casso\",",
									"            \"partner_merchant_id\": randomChars(8),",
									"            \"bin_code\": \"970422\",",
									"            \"bank_holder_name\": \"ACCOUNT 22550367\"",
									"        }",
									"        break;",
									"    case 10:",
									"        console.log(\"create merchant with missing param bank_holder_name\");",
									"        payload = {",
									"            \"partner_code\": \"Casso\",",
									"            \"partner_merchant_id\": randomChars(8),",
									"            \"bin_code\": \"970422\",",
									"            \"bank_account_number\": \"7104520894624\",",
									"        }",
									"        break;",
									"    case 11:",
									"        console.log(\"create merchant with missing param partner_merchant_id\");",
									"        payload = {",
									"            \"partner_code\": \"Casso\",",
									"            \"bin_code\": \"970422\",",
									"            \"bank_account_number\": \"7104520894624\",",
									"            \"bank_holder_name\": \"ACCOUNT 22550367\"",
									"        }",
									"        break;",
									"    case 12:",
									"        console.log(\"happy case\");",
									"        payload = {",
									"            \"partner_code\": \"Casso\",",
									"            \"partner_merchant_id\": randomChars(8), // zq3fcZSu: existed partner_merchant_id",
									"            \"bin_code\": \"970422\",",
									"            \"bank_account_number\": \"7104520894624\",",
									"            \"bank_holder_name\": \"ACCOUNT 22550367\"",
									"        }",
									"        break;",
									"    default:",
									"        console.log(\"missing flow\");",
									"        break;",
									"}",
									"",
									"console.log(\"payload: \" + JSON.stringify(payload));",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-bank_obj\",payload);",
									"",
									"//random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * return_code: 1: Khởi tạo ngân hàng thành công, 2: Thông tin tài khoản không chính xác, 400: INVALID_REQUEST",
									" * return_message",
									" * data.bank_virtual_account_number: Số tài khoản ngân hàng",
									" * data.merchant_bank_account_id: Mã định danh tài khoản ngân hàng",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \" + JSON.stringify(jsData));",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let case_ = pm.environment.get(\"C-case_\");",
									"    switch(case_){",
									"        case 2: case 3: case 4: case 5:",
									"            pm.test(\"return_code must be 2\", function () {",
									"                pm.expect(jsData.return_code == 2).to.be.true;",
									"            });",
									"",
									"            pm.test(\"return_message must be `Thông tin tài khoản không chính xác`\", function () {",
									"                pm.expect(jsData.return_message == \"Thông tin tài khoản không chính xác\").to.be.true;",
									"            });",
									"            break;",
									"        case 6:",
									"            pm.test(\"return_code must be 1\", function () {",
									"                pm.expect(jsData.return_code == 1).to.be.true;",
									"            });",
									"",
									"            pm.test(\"return_message must be `Khởi tạo ngân hàng thành công`\", function () {",
									"                pm.expect(jsData.return_message == \"Khởi tạo ngân hàng thành công\").to.be.true;",
									"            });",
									"",
									"            // ae880b3d-2825-4d1f-a3ea-15d371f0014e, 47f837ef-1fa0-4e69-8326-9f1ab0d32dca",
									"            pm.test(\"merchant_bank_account_id must be `ae880b3d-2825-4d1f-a3ea-15d371f0014e`\", function () {",
									"                pm.expect(jsData.data.merchant_bank_account_id == \"ae880b3d-2825-4d1f-a3ea-15d371f0014e\").to.be.true;",
									"            });",
									"            break;",
									"        case 1: case 7: case 8: case 9: case 10: case 11:",
									"            pm.test(\"return_code must be 400\", function () {",
									"                pm.expect(jsData.return_code == 400).to.be.true;",
									"            });",
									"",
									"            pm.test(\"return_message must be `INVALID_REQUEST`\", function () {",
									"                pm.expect(jsData.return_message == \"INVALID_REQUEST\").to.be.true;",
									"            });",
									"            break;",
									"        case 12:",
									"            pm.test(\"return_code must be 1\", function () {",
									"                pm.expect(jsData.return_code == 1).to.be.true;",
									"            });",
									"",
									"            pm.test(\"return_message must be `Khởi tạo ngân hàng thành công`\", function () {",
									"                pm.expect(jsData.return_message == \"Khởi tạo ngân hàng thành công\").to.be.true;",
									"            });",
									"            break;",
									"        default:",
									"            console.log(\"missing flow\");",
									"            break;",
									"    }",
									"    ",
									"    if(case_ >= 12){",
									"        pm.environment.unset(\"C-case_\");",
									"",
									"        let merchant_bank_account_id = null;",
									"        try {",
									"            merchant_bank_account_id = jsData.data.merchant_bank_account_id;",
									"        } catch {",
									"            console.log(\"Missing data\");",
									"        }",
									"",
									"        pm.test(\"Got merchant_bank_account_id \" + merchant_bank_account_id, function () {",
									"            pm.environment.set(\"C-merchant_bank_account_id\",merchant_bank_account_id);",
									"            pm.expect(merchant_bank_account_id != null).to.be.true;",
									"        });",
									"",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"partner_create_order\"); // partner_create_order",
									"    } else {",
									"        case_++;",
									"        pm.environment.set(\"C-case_\",case_);",
									"        console.log(\"Check next case\");",
									"        postman.setNextRequest(\"partner_create_merchant_bank_account\");",
									"    }",
									"} else {",
									"    console.log(\"Error: \" + JSON.stringify(jsData));",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 0af8ed5a-5d30-4183-a13e-082d9038837c:AeeVIFugowuqozsc",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}"
						},
						"url": {
							"raw": "{{sbh_base_url}}/api/v1/partner/create-merchant-bank-account",
							"host": [
								"{{sbh_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"partner",
								"create-merchant-bank-account"
							]
						}
					},
					"response": []
				},
				{
					"name": "partner_create_order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * partner_order_id: Mã đơn hàng ở phía partner",
									" * amount: Tổng tiền cần thanh toán của đơn hàng",
									" * custom_bank_note: Nội dung chuyển khoản mà đối tác muốn bổ sung để đối soát, tối đa 9 kí tự. Phần nội dung này sẽ được SoBanHang thêm vào cuối nội dung chuẩn của SoBanHang. Format nội dung chuyển khoản: TT{order_id}{custom_bank_note} VD: TTABCDEFG 978273991",
									" */",
									"",
									"// random number between min and max",
									"function getRandomInt(min, max) {",
									"  \treturn Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"// random phone number",
									"let randomPhone = () => {",
									"    let phoneNumber = \"\";",
									"    let viettel = ['86','96','97','98','32','33','34','35','36','37','38','39'];",
									"    let vina = ['88','81','82','83','84','85','91','94'];",
									"    let mobi = ['89','90','93','70','76','77','78','79'];",
									"    let vinamobile = ['92','56','58'];",
									"    let gmobile = ['99','59'];",
									"    let itelecom = ['87'];",
									"    // let phoneFormat = ['+84'];//'+84','0'",
									"    // phoneNumber += phoneFormat[getRandomInt(0,phoneFormat.length - 1)];",
									"    let allNet = [...viettel,...vina,...mobi,...vinamobile,...gmobile,...itelecom];",
									"    phoneNumber += allNet[getRandomInt(0,allNet.length)];",
									"    for(let i = 0; i < 7; i++){",
									"        phoneNumber += getRandomInt(0,9);",
									"    }",
									"    return phoneNumber;",
									"}",
									"",
									"//random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"if(!case_){",
									"    case_ = 1;",
									"    pm.environment.set(\"C-case_\",case_);",
									"}",
									"console.log(\"testcase: \" + testcase + \".\" + case_);",
									"",
									"let date = new Date();",
									"let timestamp = Math.floor(date.getTime()/1000).toString();",
									"console.log(\"timestamp: \" + timestamp);",
									"",
									"let payload = null;",
									"if(testcase == 6 || testcase == 7){",
									"    payload = {",
									"        \"partner_code\": \"Casso\",",
									"        \"merchant_bank_account_id\":pm.environment.get(\"C-merchant_bank_account_id\"),",
									"        \"partner_order_id\": timestamp,",
									"        \"amount\": getRandomInt(10,500) * 1000,",
									"        \"custom_bank_note\": randomPhone()",
									"    }",
									"    pm.environment.set(\"C-partner_order_id\",timestamp);",
									"} else {",
									"    switch(case_){",
									"        case 1:",
									"            console.log(\"create order with null data\");",
									"            payload = {",
									"                \"partner_code\": \"\",",
									"                \"merchant_bank_account_id\": \"\",",
									"                \"partner_order_id\": \"\",",
									"                \"amount\": \"\",",
									"                \"custom_bank_note\": \"\"",
									"            }",
									"            break;",
									"        case 2:",
									"            console.log(\"create order with wrong partner_code\");",
									"            payload = {",
									"                \"partner_code\": \"Cassox\",",
									"                \"merchant_bank_account_id\":pm.environment.get(\"C-merchant_bank_account_id\"),",
									"                \"partner_order_id\": timestamp,",
									"                \"amount\": getRandomInt(10,500) * 1000,",
									"                \"custom_bank_note\": randomPhone()",
									"            }",
									"            break;",
									"        case 3:",
									"            console.log(\"create order with merchant_bank_account_id is NOT existed\");",
									"            payload = {",
									"                \"partner_code\": \"Casso\",",
									"                \"merchant_bank_account_id\":randomChars(8) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12),",
									"                \"partner_order_id\": timestamp,",
									"                \"amount\": getRandomInt(10,500) * 1000,",
									"                \"custom_bank_note\": randomPhone()",
									"            }",
									"            break;",
									"        case 4:",
									"            console.log(\"create order with amount is negative\");",
									"            payload = {",
									"                \"partner_code\": \"Casso\",",
									"                \"merchant_bank_account_id\":pm.environment.get(\"C-merchant_bank_account_id\"),",
									"                \"partner_order_id\": timestamp,",
									"                \"amount\": -(getRandomInt(10,500) * 1000),",
									"                \"custom_bank_note\": randomPhone()",
									"            }",
									"            break;",
									"        case 5:",
									"            console.log(\"create order with missing param partner_code\");",
									"            payload = {",
									"                \"merchant_bank_account_id\":pm.environment.get(\"C-merchant_bank_account_id\"),",
									"                \"partner_order_id\": timestamp,",
									"                \"amount\": getRandomInt(10,500) * 1000,",
									"                \"custom_bank_note\": randomPhone()",
									"            }",
									"            break;",
									"        case 6:",
									"            console.log(\"create order with missing param merchant_bank_account_id\");",
									"            payload = {",
									"                \"partner_code\": \"Casso\",",
									"                \"partner_order_id\": timestamp,",
									"                \"amount\": getRandomInt(10,500) * 1000,",
									"                \"custom_bank_note\": randomPhone()",
									"            }",
									"            break;",
									"        case 7:",
									"            console.log(\"create order with missing param partner_order_id\");",
									"            payload = {",
									"                \"partner_code\": \"Casso\",",
									"                \"merchant_bank_account_id\":pm.environment.get(\"C-merchant_bank_account_id\"),",
									"                \"amount\": getRandomInt(10,500) * 1000,",
									"                \"custom_bank_note\": randomPhone()",
									"            }",
									"            break;",
									"        case 8:",
									"            console.log(\"create order with missing param amount\");",
									"            payload = {",
									"                \"partner_code\": \"Casso\",",
									"                \"merchant_bank_account_id\":pm.environment.get(\"C-merchant_bank_account_id\"),",
									"                \"partner_order_id\": timestamp,",
									"                \"custom_bank_note\": randomPhone()",
									"            }",
									"            break;",
									"        case 9:",
									"            console.log(\"create order with missing param custom_bank_note\");",
									"            payload = {",
									"                \"partner_code\": \"Casso\",",
									"                \"merchant_bank_account_id\":pm.environment.get(\"C-merchant_bank_account_id\"),",
									"                \"partner_order_id\": timestamp,",
									"                \"amount\": getRandomInt(10,500) * 1000",
									"            }",
									"            break;",
									"        case 10:",
									"            console.log(\"custom_bank_note more 9 characters\");",
									"            // Update: custom_bank_note thay 9 số điện thoại = ký tự",
									"            payload = {",
									"                \"partner_code\": \"Casso\",",
									"                \"merchant_bank_account_id\":pm.environment.get(\"C-merchant_bank_account_id\"),",
									"                \"partner_order_id\": timestamp,",
									"                \"amount\": getRandomInt(10,500) * 1000,",
									"                \"custom_bank_note\": randomChars(10)",
									"            }",
									"            pm.environment.set(\"C-partner_order_id\",timestamp);",
									"            break;",
									"        case 11:",
									"            console.log(\"happy case\")",
									"            // Update: custom_bank_note thay 9 số điện thoại = ký tự",
									"            payload = {",
									"                \"partner_code\": \"Casso\",",
									"                \"merchant_bank_account_id\":pm.environment.get(\"C-merchant_bank_account_id\"),",
									"                \"partner_order_id\": timestamp,",
									"                \"amount\": getRandomInt(10,500) * 1000,",
									"                \"custom_bank_note\": randomChars(9)",
									"            }",
									"            pm.environment.set(\"C-partner_order_id\",timestamp);",
									"            break;",
									"        default:",
									"            console.log(\"missing flow\");",
									"            break;",
									"    }",
									"}",
									"",
									"console.log(\"payload: \" + JSON.stringify(payload));",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));",
									"pm.environment.set(\"C-order_obj\",payload);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * return_code",
									" * return_message",
									" * data.bin_code",
									" * data.order_id",
									" * data.qr_code",
									" * data.amount",
									" * data.bank_name",
									" * data.bank_account_number",
									" * data.bank_virtual_account_number",
									" * data.bank_holder_name",
									" * data.bank_note",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"let case_ = pm.environment.get(\"C-case_\");",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \" + JSON.stringify(jsData));",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let case_ = pm.environment.get(\"C-case_\");",
									"",
									"    let order_id = null;",
									"    if(testcase == 6 || testcase == 7){",
									"        order_id = jsData.data.order_id;",
									"",
									"        pm.test(\"Got order_id \" + order_id, function () {",
									"            pm.environment.set(\"C-order_id\",order_id);",
									"            pm.expect(order_id != null).to.be.true;",
									"        });",
									"",
									"        postman.setNextRequest(\"get_reference_label_code\"); // get_reference_label_code",
									"    } else {",
									"        switch(case_){",
									"            case 2: case 3: case 6: case 10:",
									"                pm.test(\"return_code must be 2\", function () {",
									"                    pm.expect(jsData.return_code == 2).to.be.true;",
									"                });",
									"",
									"                pm.test(\"return_message must be `Tạo giao dịch thất bại`\", function () {",
									"                    pm.expect(jsData.return_message == \"Tạo giao dịch thất bại\").to.be.true;",
									"                });",
									"                break;",
									"            case 1: case 4: case 5: case 7: case 8:",
									"                pm.test(\"return_code must be 400\", function () {",
									"                    pm.expect(jsData.return_code == 400).to.be.true;",
									"                });",
									"",
									"                pm.test(\"return_message must be `INVALID_REQUEST`\", function () {",
									"                    pm.expect(jsData.return_message == \"INVALID_REQUEST\").to.be.true;",
									"                });",
									"                break;",
									"            case 9: case 11:",
									"                pm.test(\"return_code must be 1\", function () {",
									"                    pm.expect(jsData.return_code == 1).to.be.true;",
									"                });",
									"",
									"                pm.test(\"return_message must be `Tạo giao dịch thành công`\", function () {",
									"                    pm.expect(jsData.return_message == \"Tạo giao dịch thành công\").to.be.true;",
									"                });",
									"                break;",
									"            default:",
									"                console.log(\"missing flow\");",
									"                break;",
									"        }",
									"",
									"        if(case_ >= 11){",
									"            pm.environment.unset(\"C-case_\");",
									"",
									"            try {",
									"                order_id = jsData.data.order_id;",
									"            }",
									"            catch {",
									"                console.log(\"Missing order_id\");",
									"            }",
									"",
									"            pm.test(\"Got order_id \" + order_id, function () {",
									"                pm.environment.set(\"C-order_id\",order_id);",
									"                pm.expect(order_id != null).to.be.true;",
									"            });",
									"",
									"            if(order_id != null){",
									"                // syntax check for successful case",
									"                pm.test(\"1. data must have bin_code\", function () {",
									"                    pm.expect(\"bin_code\" in jsData.data).to.be.true;",
									"                });",
									"",
									"                pm.test(\"2. data must have order_id\", function () {",
									"                    pm.expect(\"order_id\" in jsData.data).to.be.true;",
									"                });",
									"",
									"                pm.test(\"3. data must have qr_code\", function () {",
									"                    pm.expect(\"qr_code\" in jsData.data).to.be.true;",
									"                });",
									"",
									"                pm.test(\"4. data must have amount\", function () {",
									"                    pm.expect(\"amount\" in jsData.data).to.be.true;",
									"                });",
									"",
									"                pm.test(\"5. data must have bank_name\", function () {",
									"                    pm.expect(\"bank_name\" in jsData.data).to.be.true;",
									"                });",
									"",
									"                pm.test(\"6. data must have bank_account_number\", function () {",
									"                    pm.expect(\"bank_account_number\" in jsData.data).to.be.true;",
									"                });",
									"",
									"                pm.test(\"7. data must have bank_virtual_account_number\", function () {",
									"                    pm.expect(\"bank_virtual_account_number\" in jsData.data).to.be.true;",
									"                });",
									"",
									"                pm.test(\"8. data must have bank_holder_name\", function () {",
									"                    pm.expect(\"bank_holder_name\" in jsData.data).to.be.true;",
									"                });",
									"",
									"                pm.test(\"9. data must have bank_note\", function () {",
									"                    pm.expect(\"bank_note\" in jsData.data).to.be.true;",
									"                });",
									"",
									"                // check data",
									"                let order_obj = pm.environment.get(\"C-order_obj\");",
									"                let bank_obj = pm.environment.get(\"C-bank_obj\");",
									"",
									"                pm.test(\"bin_code correctly! \" + bank_obj.bin_code, function () {",
									"                    let act_bin_code = null;",
									"                    try {",
									"                        act_bin_code = jsData.data.bin_code;",
									"                    } catch {",
									"                        console.log(\"Missing bin_code\");",
									"                    }",
									"                    pm.expect(act_bin_code == bank_obj.bin_code).to.be.true;",
									"                });",
									"",
									"                pm.test(\"amount correctly! \" + order_obj.amount, function () {",
									"                    let act_amount = null;",
									"                    try {",
									"                        act_amount = jsData.data.amount;",
									"                    } catch {",
									"                        console.log(\"Missing amount\");",
									"                    }",
									"                    pm.expect(act_amount == order_obj.amount).to.be.true;",
									"                });",
									"",
									"                pm.test(\"bank_account_number correctly! \" + bank_obj.bank_account_number, function () {",
									"                    let act_bank_account_number = null;",
									"                    try {",
									"                        act_bank_account_number = jsData.data.bank_account_number;",
									"                    } catch {",
									"                        console.log(\"Missing bank_account_number\");",
									"                    }",
									"                    pm.expect(act_bank_account_number == bank_obj.bank_account_number).to.be.true;",
									"                });",
									"",
									"                let exp_bank_note = \"TT\" + jsData.data.order_id + \" \" + order_obj.custom_bank_note;",
									"                pm.test(\"bank_note correctly! \" + exp_bank_note, function () {",
									"                    let act_bank_note = null;",
									"                    try {",
									"                        act_bank_note = jsData.data.bank_note;",
									"                        console.log(\"act_bank_note: \" + act_bank_note);",
									"                    } catch {",
									"                        console.log(\"Missing bank_note\");",
									"                    }",
									"                    pm.expect(act_bank_note == exp_bank_note).to.be.true;",
									"                });",
									"",
									"                pm.test(\"bank_holder_name correctly! \" + bank_obj.bank_holder_name, function () {",
									"                    let act_bank_holder_name = null;",
									"                    try {",
									"                        act_bank_holder_name = jsData.data.bank_holder_name;",
									"                    } catch {",
									"                        console.log(\"Missing bank_holder_name\");",
									"                    }",
									"                    pm.expect(act_bank_holder_name == bank_obj.bank_holder_name).to.be.true;",
									"                });",
									"            ",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                postman.setNextRequest(\"partner_view_order_detail\"); // partner_view_order_detail",
									"            } else {",
									"                console.log(\"Can't create partner order, please check\");",
									"                postman.setNextRequest(null);",
									"            }",
									"        } else {",
									"            case_++;",
									"            pm.environment.set(\"C-case_\",case_);",
									"            console.log(\"Check next case\");",
									"            postman.setNextRequest(\"partner_create_order\");",
									"        }",
									"    }",
									"} else {",
									"    console.log(\"Error: \" + JSON.stringify(jsData));",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 0af8ed5a-5d30-4183-a13e-082d9038837c:AeeVIFugowuqozsc",
								"type": "text",
								"description": "0af8ed5a-5d30-4183-a13e-082d9038837c:AeeVIFugowuqozsc"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}"
						},
						"url": {
							"raw": "{{sbh_base_url}}/api/v1/partner/payment-order/create",
							"host": [
								"{{sbh_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"partner",
								"payment-order",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_reference_label_code",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    // let testcase = pm.environment.get(\"C-testcase\");",
									"    console.log(\"jsData: \" + JSON.stringify(jsData));",
									"",
									"    let referenceLabelCode = null;",
									"    try {",
									"        referenceLabelCode = jsData.data.ref_id;",
									"    } catch {",
									"        console.log(\"Missing referenceLabelCode\");",
									"    }",
									"",
									"    pm.test(\"Got referenceLabelCode\", function () {",
									"        pm.expect(referenceLabelCode != null).to.be.true;",
									"    });",
									"",
									"    if(referenceLabelCode != null){",
									"        pm.environment.set(\"C-referenceLabelCode\",referenceLabelCode);",
									"        pm.environment.set(\"C-total_amount\",jsData.data.amount);",
									"",
									"        postman.setNextRequest(\"hash_data\"); // hash_data",
									"    } else {",
									"        console.log(\"Can't get referenceLabelCode, end test\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error: \" + JSON.stringify(jsData));",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sbh_base_url}}/fs-biz-qr/api/v1/qr-manual-request/get-detail?platform_key=Casso&order_id={{C-order_id}}&external_id={{C-partner_order_id}}",
							"host": [
								"{{sbh_base_url}}"
							],
							"path": [
								"fs-biz-qr",
								"api",
								"v1",
								"qr-manual-request",
								"get-detail"
							],
							"query": [
								{
									"key": "platform_key",
									"value": "Casso"
								},
								{
									"key": "order_id",
									"value": "{{C-order_id}}",
									"description": "TVVFLH"
								},
								{
									"key": "external_id",
									"value": "{{C-partner_order_id}}",
									"description": "1689650606"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Partner",
			"item": [
				{
					"name": "webhook_to_partner",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * Check from Casso",
									" * SHB: will support change order status",
									" * Check from SBH",
									" * => hook to Lark channel when create new order successful or change order status (has new transactions)",
									" */"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"partner_code\": \"Casso\",\n    \"partner_merchant_id\": \"JM3H76T\",\n    \"bin_code\": \"970422\",\n    \"partner_order_id\": \"2023070600224\",\n    \"amount\": 200000,\n    \"txn_id\": \"IIH326XP\",\n    \"txn_time\":\"2023-07-06 16:11:01\",\n    \"created_at\": \"2023-07-06 16:11:05\",\n    \"bank_account_number\": \"1008223627\",\n    \"bank_virtual_account_number\": \"\",\n    \"bank_holder_name\": \"LE TAN DAT\",\n    \"bank_note\": \"TTABCDEFG 978273991\",\n    \"bank_ref_code\": \"1688460250000801609504\",\n    \"order_total_amount\": 200000,\n    \"order_paid_amount\": 120000,\n    \"order_status\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL_CALLBACK_PARTNER}}",
							"host": [
								"{{URL_CALLBACK_PARTNER}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "partner_view_order_detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/**",
									" * response must have:",
									" * return_code",
									" * return_message",
									" * data.partner_code",
									" * data.partner_merchant_id => update to key: merchant_bank_account_id",
									" * data.partner_order_id",
									" * data.order_id",
									" * data.order_total_amount",
									" * data.order_paid_amount",
									" * data.transactions = array with",
									" * - txn_id",
									" * - amount",
									" * - created_at",
									" * - bank_virtual_account_number",
									" * - bank_note",
									" * - bank_ref_code",
									" */",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    switch(testcase){",
									"        case 3:",
									"            // check syntax",
									"            console.log(\"debug: \" + JSON.stringify(jsData));",
									"            pm.test(\"1. data must have partner_code\", function (){",
									"                pm.expect(\"partner_code\" in jsData.data).to.be.true;",
									"            });",
									"",
									"            // pm.test(\"2. data must have partner_merchant_id\", function (){",
									"            //     pm.expect(\"partner_merchant_id\" in jsData.data).to.be.true;",
									"            // });",
									"",
									"            pm.test(\"2. data must have merchant_bank_account_id\", function (){",
									"                pm.expect(\"merchant_bank_account_id\" in jsData.data).to.be.true;",
									"            });",
									"",
									"            pm.test(\"3. data must have partner_order_id\", function (){",
									"                pm.expect(\"partner_order_id\" in jsData.data).to.be.true;",
									"            });",
									"",
									"            pm.test(\"4. data must have order_id\", function (){",
									"                pm.expect(\"order_id\" in jsData.data).to.be.true;",
									"            });",
									"",
									"            pm.test(\"5. data must have order_total_amount\", function (){",
									"                pm.expect(\"order_total_amount\" in jsData.data).to.be.true;",
									"            });",
									"",
									"            pm.test(\"6. data must have order_paid_amount\", function (){",
									"                pm.expect(\"order_paid_amount\" in jsData.data).to.be.true;",
									"            });",
									"",
									"            // mục số 7 này cần check thêm khi có resp từ bank",
									"            pm.test(\"7. data must have transactions\", function (){",
									"                pm.expect(\"transactions\" in jsData.data).to.be.true;",
									"            });",
									"",
									"            // check data",
									"            pm.test(\"return_code must be 4\", function (){",
									"                pm.expect(jsData.return_code == 4).to.be.true;",
									"            });",
									"",
									"            pm.test(\"return_message must be `Chưa thanh toán`\", function (){",
									"                pm.expect(jsData.return_message == \"Chưa thanh toán\").to.be.true;",
									"            });",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"get_reference_label_code\"); // get_reference_label_code",
									"            break;",
									"        case 4:",
									"            console.log(\"debug: \" + JSON.stringify(jsData));",
									"",
									"            // check data",
									"            pm.test(\"return_code must be 3\", function (){",
									"                pm.expect(jsData.return_code == 3).to.be.true;",
									"            });",
									"",
									"            pm.test(\"return_message must be `Thanh toán 1 phần`\", function (){",
									"                pm.expect(jsData.return_message == \"Thanh toán 1 phần\").to.be.true;",
									"            });",
									"",
									"            pm.test(\"order_paid_amount must be \" + pm.environment.get(\"C-amount\"), function (){",
									"                pm.expect(jsData.data.order_paid_amount == pm.environment.get(\"C-amount\")).to.be.true;",
									"            });",
									"",
									"            pm.test(\"Had new transactions\", function (){",
									"                pm.expect(jsData.data.transactions.length == 1).to.be.true;",
									"            });",
									"",
									"            if(jsData.data.transactions.length == 1){",
									"                // check syntax for transactions",
									"                pm.test(\"1. transactions must have txn_id\", function (){",
									"                    pm.expect(\"txn_id\" in jsData.data.transactions[0]).to.be.true;",
									"                });",
									"",
									"                pm.test(\"2. transactions must have amount\", function (){",
									"                    pm.expect(\"amount\" in jsData.data.transactions[0]).to.be.true;",
									"                });",
									"",
									"                pm.test(\"3. transactions must have created_at\", function (){",
									"                    pm.expect(\"created_at\" in jsData.data.transactions[0]).to.be.true;",
									"                });",
									"",
									"                // pm.test(\"4. transactions must have bin_code\", function (){",
									"                //     pm.expect(\"bin_code\" in jsData.data.transactions[0]).to.be.true;",
									"                // });",
									"",
									"                // pm.test(\"5. transactions must have bank_account_number\", function (){",
									"                //     pm.expect(\"bank_account_number\" in jsData.data.transactions[0]).to.be.true;",
									"                // });",
									"",
									"                pm.test(\"6. transactions must have bank_virtual_account_number\", function (){",
									"                    pm.expect(\"bank_virtual_account_number\" in jsData.data.transactions[0]).to.be.true;",
									"                });",
									"",
									"                // pm.test(\"7. transactions must have bank_holder_name\", function (){",
									"                //     pm.expect(\"bank_holder_name\" in jsData.data.transactions[0]).to.be.true;",
									"                // });",
									"",
									"                pm.test(\"8. transactions must have bank_note\", function (){",
									"                    pm.expect(\"bank_note\" in jsData.data.transactions[0]).to.be.true;",
									"                });",
									"",
									"                pm.test(\"9. transactions must have bank_ref_code\", function (){",
									"                    pm.expect(\"bank_ref_code\" in jsData.data.transactions[0]).to.be.true;",
									"                });",
									"                ",
									"                // check data",
									"            }",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"hash_data\"); // hash_data",
									"            break;",
									"        case 5:",
									"            console.log(\"debug: \" + JSON.stringify(jsData));",
									"",
									"            // check data",
									"            pm.test(\"return_code must be 2\", function (){",
									"                pm.expect(jsData.return_code == 2).to.be.true;",
									"            });",
									"",
									"            pm.test(\"return_message must be `Thanh toán dư`\", function (){",
									"                pm.expect(jsData.return_message == \"Thanh toán dư\").to.be.true;",
									"            });",
									"",
									"            pm.test(\"order_paid_amount must be \" + (pm.environment.get(\"C-total_amount\") + 1), function (){",
									"                pm.expect(jsData.data.order_paid_amount == (pm.environment.get(\"C-total_amount\") + 1)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"Had new transactions\", function (){",
									"                pm.expect(jsData.data.transactions.length == 2).to.be.true;",
									"            });",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"partner_create_order\"); // partner_create_order",
									"            break;",
									"        case 6:",
									"            console.log(\"debug: \" + JSON.stringify(jsData));",
									"",
									"            // check data",
									"            pm.test(\"return_code must be 1\", function (){",
									"                pm.expect(jsData.return_code == 1).to.be.true;",
									"            });",
									"",
									"            pm.test(\"return_message must be `Thanh toán đủ`\", function (){",
									"                pm.expect(jsData.return_message == \"Thanh toán đủ\").to.be.true;",
									"            });",
									"",
									"            pm.test(\"order_paid_amount must be \" + pm.environment.get(\"C-total_amount\"), function (){",
									"                pm.expect(jsData.data.order_paid_amount == pm.environment.get(\"C-total_amount\")).to.be.true;",
									"            });",
									"",
									"            pm.test(\"Had new transactions\", function (){",
									"                pm.expect(jsData.data.transactions.length == 1).to.be.true;",
									"            });",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"partner_create_order\"); // partner_create_order",
									"            break;",
									"        case 7:",
									"            console.log(\"debug: \" + JSON.stringify(jsData));",
									"",
									"            // check data",
									"            pm.test(\"return_code must be 2\", function (){",
									"                pm.expect(jsData.return_code == 2).to.be.true;",
									"            });",
									"",
									"            pm.test(\"return_message must be `Thanh toán dư`\", function (){",
									"                pm.expect(jsData.return_message == \"Thanh toán dư\").to.be.true;",
									"            });",
									"",
									"            pm.test(\"order_paid_amount must be \" + (pm.environment.get(\"C-total_amount\") + 1000), function (){",
									"                pm.expect(jsData.data.order_paid_amount == (pm.environment.get(\"C-total_amount\") + 1000)).to.be.true;",
									"            });",
									"",
									"            pm.test(\"Had new transactions\", function (){",
									"                pm.expect(jsData.data.transactions.length == 1).to.be.true;",
									"            });",
									"",
									"            console.log(\"--- END TEST INTEGRATE CASSO ---\");",
									"            console.log(\"Order status will manual check later!!!\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Error: \" + JSON.stringify(jsData));",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"testcase: \" + testcase);",
									"",
									"let merchant_bank_account_id, partner_order_id;",
									"switch(testcase){",
									"    case 3: case 4: case 5: case 6: case 7:",
									"        merchant_bank_account_id = pm.environment.get(\"C-merchant_bank_account_id\");",
									"        partner_order_id = pm.environment.get(\"C-partner_order_id\");",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"console.log(\"merchant_bank_account_id: \" + merchant_bank_account_id);",
									"console.log(\"partner_order_id: \" + partner_order_id);",
									"",
									"pm.environment.set(\"C-merchant_bank_account_id\",merchant_bank_account_id);",
									"pm.environment.set(\"C-partner_order_id\",partner_order_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer 0af8ed5a-5d30-4183-a13e-082d9038837c:AeeVIFugowuqozsc",
								"type": "text",
								"description": "0af8ed5a-5d30-4183-a13e-082d9038837c:AeeVIFugowuqozsc"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sbh_base_url}}/api/v1/partner/payment-order/get-one?partner_code=Casso&merchant_bank_account_id={{C-merchant_bank_account_id}}&partner_order_id={{C-partner_order_id}}",
							"host": [
								"{{sbh_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"partner",
								"payment-order",
								"get-one"
							],
							"query": [
								{
									"key": "partner_code",
									"value": "Casso"
								},
								{
									"key": "merchant_bank_account_id",
									"value": "{{C-merchant_bank_account_id}}"
								},
								{
									"key": "partner_order_id",
									"value": "{{C-partner_order_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bank webhook",
			"item": [
				{
					"name": "hash_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \" + JSON.stringify(jsData));",
									"    let outputString = null;",
									"    try {",
									"        outputString = jsData.outputString;",
									"    } catch {",
									"        console.log(\"Missing outputString\")",
									"    }",
									"",
									"    pm.test(\"Got signature \" + outputString, function () {",
									"        pm.expect(outputString != null).to.be.true;",
									"    });",
									"",
									"    if(outputString != null){",
									"        pm.environment.set(\"C-signature\",outputString)",
									"        postman.setNextRequest(\"webhook_from_MBBank_to_update_order\"); // webhook_from_MBBank_to_update_order",
									"    } else {",
									"        console.log(\"Can't generate signature, end test\");",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error: \" + JSON.stringify(jsData));",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"// random number between min and max",
									"function getRandomInt(min, max) {",
									"  \treturn Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"testcase: \" + testcase);",
									"",
									"let today = new Date();",
									"let referenceId = Math.floor(today.getTime()/1000);",
									"let requestId = randomChars(8);",
									"",
									"let total_amount = pm.environment.get(\"C-total_amount\");",
									"",
									"let amount, inputString;",
									"switch(testcase){",
									"    case 4:",
									"        amount = getRandomInt(1000, (total_amount - 10000));",
									"        inputString = requestId + referenceId + amount;",
									"        break;",
									"    case 5:",
									"        amount = total_amount - pm.environment.get(\"C-amount\") + 1;",
									"        inputString = requestId + referenceId + amount;",
									"        break;",
									"    case 6:",
									"        amount = total_amount;",
									"        inputString = requestId + referenceId + amount;",
									"        break;",
									"    case 7:",
									"        amount = total_amount + 1000;",
									"        inputString = requestId + referenceId + amount;",
									"        break;",
									"    default:",
									"        console.log(\"Missing flow\");",
									"        break;",
									"}",
									"",
									"console.log(\"requestId: \" + requestId);",
									"console.log(\"referenceId: \" + referenceId);",
									"console.log(\"amount: \" + amount);",
									"console.log(\"inputString: \" + inputString);",
									"",
									"pm.environment.set(\"C-requestId\",requestId);",
									"pm.environment.set(\"C-referenceId\",referenceId);",
									"pm.environment.set(\"C-amount\",amount);",
									"pm.environment.set(\"C-inputString\",inputString);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"inputString\":\"{{C-inputString}}\",\n    \"secretKey\":\"SBH2022\",\n    \"algo\":\"SHA-256\",\n    \"outputFormat\":\"Base64\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://www.devglan.com/online-tools/hmac-sha256-online",
							"protocol": "https",
							"host": [
								"www",
								"devglan",
								"com"
							],
							"path": [
								"online-tools",
								"hmac-sha256-online"
							]
						}
					},
					"response": []
				},
				{
					"name": "webhook_from_MBBank_to_update_order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsData = pm.response.json();",
									"if(pm.response.code == 200){",
									"    console.log(\"debug: \" + JSON.stringify(jsData));",
									"    ",
									"    postman.setNextRequest(\"partner_view_order_detail\");",
									"} else {",
									"    console.log(\"Error: \" + JSON.stringify(jsData));",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let today = new Date();",
									"let timestamp = today.getFullYear() + \"-\" + String(today.getMonth() + 1).padStart(2,0) + \"-\" + String(today.getDate()).padStart(2,0) + \" \" + String(today.getHours()).padStart(2,0) + \":\" + String(today.getMinutes()).padStart(2,0) + \":\" + String(today.getSeconds()).padStart(2,0);",
									"",
									"let amount = pm.environment.get(\"C-amount\");",
									"let referenceLabelCode = pm.environment.get(\"C-referenceLabelCode\");",
									"let referenceId = pm.environment.get(\"C-referenceId\");",
									"let signature = pm.environment.get(\"C-signature\");",
									"",
									"console.log(\"timestamp: \" + timestamp);",
									"console.log(\"amount: \" + amount);",
									"console.log(\"referenceLabelCode: \" + referenceLabelCode);",
									"console.log(\"referenceId: \" + referenceId);",
									"console.log(\"signature: \" + signature);",
									"console.log(\"requestId: \" + pm.environment.get(\"C-requestId\"));",
									"",
									"pm.environment.set(\"C-timestamp\",timestamp);",
									"pm.environment.set(\"C-amount\",amount);",
									"pm.environment.set(\"C-referenceLabelCode\",referenceLabelCode);",
									"pm.environment.set(\"C-referenceId\",referenceId);",
									"pm.environment.set(\"C-signature\",signature);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer b5d6351d-f82d-4655-8774-3a39f38a11a2:beNdafoSmvWPORAb",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "signature",
								"value": "{{C-signature}}",
								"type": "text"
							},
							{
								"key": "requestId",
								"value": "{{C-requestId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"provider\": \"sbh-mbbank\",\n    \"job\": \"new_qr_transaction\",\n    \"timestamp\": \"{{C-timestamp}}\",\n     \"data\": {\n        \"terminalName\": \"SBH1\",\n        \"terminalId\": \"SBH1\",\n        \"amount\": {{C-amount}},\n        \"time\": \"{{C-timestamp}}\",\n        \"referenceLabelCode\": \"{{C-referenceLabelCode}}\",\n        \"referenceId\": \"{{C-referenceId}}\",\n        \"additional\": {\n            \"bankCode\": \"970422\",\n            \"customerAccount\": \"0338859319\",\n            \"customerName\": \"dform test\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{sbh_base_url}}/web-hook/v1/nuclent/process",
							"host": [
								"{{sbh_base_url}}"
							],
							"path": [
								"web-hook",
								"v1",
								"nuclent",
								"process"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
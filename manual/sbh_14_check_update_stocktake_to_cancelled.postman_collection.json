{
	"info": {
		"_postman_id": "2c978492-309c-46f7-8542-2adef9683921",
		"name": "sbh_14_check_update_stocktake_to_cancelled",
		"description": "Testsuite: KIỂM KHO - cancelled\n\nTestcase:\n\n1. Login with Seller Account (owner) => get business_id\n2. Get list products in stock\n3. View & check stock_summary\n4. View list PO (purchase order) => get total, get 1st PO with status = processing (po_id)\n5. View PO detail to get more info (list_items)\n6. Update this PO with status = cancelled\n7. Check\n    1. List PO: status 1st PO updated\n    2. PO detail: status updated\n    3. List products in stock => nothing happen",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "282640"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "request_generate_otp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"--- Start Testsuite 14 ---\");",
									"",
									"let testcase = 1;",
									"pm.environment.set(\"C-testcase\",testcase);",
									"",
									"//random characters",
									"function randomChars(length) {",
									"    var result           = '';",
									"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    var charactersLength = characters.length;",
									"    for ( var i = 0; i < length; i++ ) {",
									"      result += characters.charAt(Math.floor(Math.random() * ",
									" charactersLength));",
									"   }",
									"   return result;",
									"}",
									"",
									"//random number between min and max",
									"function getRandomInt(min, max) {",
									"  \treturn Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"let secret_key = randomChars(40);",
									"let platfrom_list = [\"pro_web\",\"stapp\"];",
									"let device_id = randomChars(8) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(4) + \"-\" + randomChars(12);",
									"",
									"let phone_number = pm.environment.get(\"SER-phone_number\")",
									"pm.environment.set(\"C-phone_number\",phone_number);",
									"pm.environment.set(\"C-device_id\",device_id);",
									"pm.environment.set(\"C-secret_key\",secret_key);",
									"",
									"let platform = platfrom_list[0];//platfrom_list[getRandomInt(0,platfrom_list.length - 1)];",
									"pm.environment.set(\"C-platform\",platform);",
									"let payload = {",
									"    \"platform\": platform,",
									"    \"phone_number\":phone_number,",
									"    \"device_id\":device_id",
									"}",
									"// debug",
									"console.log(\"payload: \" + JSON.stringify(payload));",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"",
									"    if(jsData.data.status == \"created\"){",
									"        postman.setNextRequest(\"get_user_token_via_otp\");",
									"    } else {",
									"        console.log(\"Error:\", JSON.stringify(jsData));",
									"        postman.setNextRequest(null);",
									"    }",
									"} else {",
									"    console.log(\"Error, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sbh_base_url}}/finan-user/api/v1/auth/otp/generate",
							"host": [
								"{{sbh_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"otp",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_user_token_via_otp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/**",
									" * fix for DEV n STAGING: otp = 1207",
									" * note: newman can't parse with note in body raw type",
									" * UPDATE 05SEP2023: http change to https",
									" */",
									"",
									"let payload = {",
									"    \"platform\":pm.environment.get(\"C-platform\"),",
									"    \"otp\":\"1207\",",
									"    \"phone_number\":pm.environment.get(\"C-phone_number\"),",
									"    \"device_id\":pm.environment.get(\"C-device_id\")",
									"}",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    // debug",
									"    // console.log(JSON.stringify(jsData));",
									"",
									"    let business_id = null;",
									"    try{",
									"        business_id = jsData.data.business_info.list_business[0].business_id;",
									"    } catch{",
									"        console.log(\"This is new user, must create business_id\");",
									"    }",
									"",
									"    let userToken = jsData.data.token;",
									"    pm.environment.set(\"C-userToken\",userToken);",
									"",
									"    if(business_id == null){",
									"        console.log(\"This user don't have store, please check & use another account\");",
									"        ",
									"        postman.setNextRequest(null);",
									"    } else {",
									"        let userRefreshToken = jsData.data.refresh_token;",
									"",
									"        let userInfo = {",
									"            \"role_name\":jsData.data.business_info.current_role.role_name,",
									"            \"is_owner\":jsData.data.business_info.current_role.is_owner,",
									"            \"user_name\":jsData.data.business_info.list_business[0].user_name,",
									"            \"business_id\":business_id",
									"        }",
									"",
									"        // show log",
									"        console.log(\"userToken:\",userToken);",
									"        console.log(\"userRefreshToken:\",userRefreshToken);",
									"        console.log(\"userInfo:\",JSON.stringify(userInfo));",
									"",
									"        pm.environment.set(\"C-userRefreshToken\",userRefreshToken);",
									"        pm.environment.set(\"C-userInfo\",userInfo);",
									"        pm.environment.set(\"C-business_id\",business_id);",
									"",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"        testcase++;",
									"        pm.environment.set(\"C-testcase\",testcase);",
									"        postman.setNextRequest(\"seller_view_list_products_in_stock\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get Token, end test\");",
									"",
									"    // debug",
									"    let jsData = pm.response.json();",
									"    console.log(\"data:\",JSON.stringify(jsData));",
									"",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{sbh_base_url}}/finan-user/api/v1/auth/otp/confirm",
							"host": [
								"{{sbh_base_url}}"
							],
							"path": [
								"finan-user",
								"api",
								"v1",
								"auth",
								"otp",
								"confirm"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "seller_view_list_products_in_stock",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"}",
									"pm.environment.set(\"C-page\",page);",
									"",
									"let page_size = 30;",
									"pm.environment.set(\"C-page_size\",page_size);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = JSON.parse(responseBody);",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"    let list_sku_in_stock = pm.environment.get(\"C-list_sku_in_stock\");",
									"    if(!list_sku_in_stock){",
									"        list_sku_in_stock = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        list_sku_in_stock[list_sku_in_stock.length] = {",
									"            \"sku_id\":jsData.data[item].id,",
									"            \"business_id\":jsData.data[item].business_id,",
									"            \"product_id\":jsData.data[item].product_id,",
									"            \"product_name\":jsData.data[item].product_name,",
									"            \"type\":jsData.data[item].type,",
									"            \"product_type\":jsData.data[item].product_type,",
									"            \"sku_name\":jsData.data[item].sku_name,",
									"            \"sku_code\":jsData.data[item].sku_code,",
									"            \"total_quantity\":jsData.data[item].total_quantity,",
									"            \"historical_cost\":jsData.data[item].historical_cost,",
									"            \"normal_price\":jsData.data[item].normal_price,",
									"            \"can_pick_quantity\":jsData.data[item].can_pick_quantity",
									"        }",
									"    }",
									"    pm.environment.set(\"C-list_sku_in_stock\",list_sku_in_stock);",
									"    console.log(\"list sku: \" + JSON.stringify(list_sku_in_stock));",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"        switch(testcase){",
									"            case 2:",
									"                testcase++;",
									"                pm.environment.set(\"C-testcase\",testcase);",
									"                postman.setNextRequest(\"seller_view_stock_summary\"); // seller_view_stock_summary",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more orders\");",
									"        postman.setNextRequest(\"seller_view_list_products_in_stock\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product in stock, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sbh_base_url}}/finan-product/api/v1/product/get-all-product-in-stock?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=null&category_id=",
							"host": [
								"{{sbh_base_url}}"
							],
							"path": [
								"finan-product",
								"api",
								"v1",
								"product",
								"get-all-product-in-stock"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": "null"
								},
								{
									"key": "category_id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "check_list_products_in_stock",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let page = pm.environment.get(\"C-page\");",
									"",
									"if(!page){",
									"    page = 1;",
									"}",
									"pm.environment.set(\"C-page\",page);",
									"",
									"let page_size = 30;",
									"pm.environment.set(\"C-page_size\",page_size);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = JSON.parse(responseBody);",
									"    let total_pages = jsData.meta.total_pages;",
									"    let page = pm.environment.get(\"C-page\");",
									"    let new_list_sku_in_stock = pm.environment.get(\"C-new_list_sku_in_stock\");",
									"    if(!new_list_sku_in_stock){",
									"        new_list_sku_in_stock = [];",
									"    }",
									"",
									"    for(let item in jsData.data){",
									"        new_list_sku_in_stock[new_list_sku_in_stock.length] = {",
									"            \"sku_id\":jsData.data[item].id,",
									"            \"business_id\":jsData.data[item].business_id,",
									"            \"product_id\":jsData.data[item].product_id,",
									"            \"product_name\":jsData.data[item].product_name,",
									"            \"type\":jsData.data[item].type,",
									"            \"product_type\":jsData.data[item].product_type,",
									"            \"sku_name\":jsData.data[item].sku_name,",
									"            \"sku_code\":jsData.data[item].sku_code,",
									"            \"total_quantity\":jsData.data[item].total_quantity,",
									"            \"historical_cost\":jsData.data[item].historical_cost,",
									"            \"normal_price\":jsData.data[item].normal_price,",
									"            \"can_pick_quantity\":jsData.data[item].can_pick_quantity",
									"        }",
									"    }",
									"    pm.environment.set(\"C-new_list_sku_in_stock\",new_list_sku_in_stock);",
									"    console.log(\"list sku: \" + JSON.stringify(new_list_sku_in_stock));",
									"",
									"    if(page >= total_pages){",
									"        // must clear page & page_size",
									"        pm.environment.unset(\"C-page\");",
									"        pm.environment.unset(\"C-page_size\");",
									"        let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"        switch(testcase){",
									"            case 7:",
									"                let stocktake_obj = pm.environment.get(\"C-stocktake_obj\");",
									"                let count = 0; let check = true;",
									"                for(let i in new_list_sku_in_stock){",
									"                    for(let j in stocktake_obj.list_item){",
									"                        if(new_list_sku_in_stock[i].sku_id == stocktake_obj.list_item[j].sku_id){",
									"                            count++;",
									"                            console.log(\"sku \" + count + \": \" + new_list_sku_in_stock[i].sku_id);",
									"                            if(new_list_sku_in_stock[i].total_quantity != stocktake_obj.list_item[j].before_change_quantity){",
									"                                check = false;",
									"                            }",
									"                            break;",
									"                        }",
									"                    }",
									"                }",
									"                ",
									"                pm.test(\"Updated \" + stocktake_obj.total_items + \" sku\", function () {",
									"                    pm.expect(stocktake_obj.total_items == count).to.be.true;",
									"                });",
									"",
									"                pm.test(\"Nothing happen with products in stock!!!\", function () {",
									"                    pm.expect(check).to.be.true;",
									"                });",
									"",
									"                pm.environment.set(\"C-new_list_sku_in_stock\",new_list_sku_in_stock);",
									"                postman.setNextRequest(\"seller_view_stock_summary\");",
									"                break;",
									"            default:",
									"                console.log(\"Missing flow, end test\");",
									"                postman.setNextRequest(null);",
									"                break;",
									"        }",
									"    } else {",
									"        page++;",
									"        pm.environment.set(\"C-page\",page);",
									"",
									"        console.log(\"view next page (\" + page + \") to get more orders\");",
									"        postman.setNextRequest(\"check_list_products_in_stock\");",
									"    }",
									"} else {",
									"    console.log(\"Can't get list product in stock, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sbh_base_url}}/finan-product/api/v1/product/get-all-product-in-stock?business_id={{C-business_id}}&page={{C-page}}&page_size={{C-page_size}}&search=&sort=null&category_id=",
							"host": [
								"{{sbh_base_url}}"
							],
							"path": [
								"finan-product",
								"api",
								"v1",
								"product",
								"get-all-product-in-stock"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "page",
									"value": "{{C-page}}"
								},
								{
									"key": "page_size",
									"value": "{{C-page_size}}"
								},
								{
									"key": "search",
									"value": ""
								},
								{
									"key": "sort",
									"value": "null"
								},
								{
									"key": "category_id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Warehouse",
			"item": [
				{
					"name": "seller_view_stock_summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    console.log(\"debug: \" + JSON.stringify(jsData));",
									"    // let list_sku = pm.environment.get(\"C-list_sku\");",
									"    let total_quantity = 0, total_amount = 0;",
									"",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    switch(testcase){",
									"        case 3:",
									"            // let list_sku = pm.environment.get(\"C-list_sku\");",
									"            let list_sku_in_stock = pm.environment.get(\"C-list_sku_in_stock\");",
									"            for(let item in list_sku_in_stock){",
									"                total_quantity += list_sku_in_stock[item].total_quantity;",
									"                total_amount += list_sku_in_stock[item].can_pick_quantity*list_sku_in_stock[item].historical_cost;",
									"            }",
									"",
									"            pm.test(\"total_quantity is \" + total_quantity, function () {",
									"                console.log(\"Expected: \" + total_quantity);",
									"                console.log(\"Actual: \" + jsData.data.total_quantity);",
									"                pm.expect(total_quantity == jsData.data.total_quantity).to.be.true;",
									"            });",
									"",
									"            pm.test(\"total_amount is \" + total_amount, function () {",
									"                console.log(\"Expected: \" + total_amount);",
									"                console.log(\"Actual: \" + jsData.data.total_amount);",
									"                pm.expect(total_amount == jsData.data.total_amount).to.be.true;",
									"            });",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"view_list_po\"); // view_list_po",
									"            break;",
									"        case 7:",
									"            // let list_sku = pm.environment.get(\"C-list_sku\");",
									"            let new_list_sku_in_stock = pm.environment.get(\"C-new_list_sku_in_stock\");",
									"            for(let item in new_list_sku_in_stock){",
									"                total_quantity += new_list_sku_in_stock[item].total_quantity;",
									"                total_amount += new_list_sku_in_stock[item].total_quantity*new_list_sku_in_stock[item].historical_cost;",
									"            }",
									"",
									"            pm.test(\"total_quantity is \" + total_quantity, function () {",
									"                console.log(\"Expected: \" + total_quantity);",
									"                console.log(\"Actual: \" + jsData.data.total_quantity);",
									"                pm.expect(total_quantity == jsData.data.total_quantity).to.be.true;",
									"            });",
									"",
									"            pm.test(\"total_amount is \" + total_amount, function () {",
									"                console.log(\"Expected: \" + total_amount);",
									"                console.log(\"Actual: \" + jsData.data.total_amount);",
									"                pm.expect(total_amount == jsData.data.total_amount).to.be.true;",
									"            });",
									"",
									"            pm.environment.unset(\"C-testcase\");",
									"            console.log(\"--- End Testsuite 14 ---\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get stock summary, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sbh_base_url}}/ms-warehouse-management/api/v2/warehouse/get-summary?business_id={{C-business_id}}",
							"host": [
								"{{sbh_base_url}}"
							],
							"path": [
								"ms-warehouse-management",
								"api",
								"v2",
								"warehouse",
								"get-summary"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "view_list_po",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"// lấy full tháng hiện tại",
									"// let today = new Date();",
									"// let firstDay = new Date(today.getFullYear(), today.getMonth(), 1);",
									"// let start_time= firstDay.toISOString();",
									"// let lastDay = new Date(today.getFullYear(), today.getMonth() + 1, 1);",
									"// let end_time= lastDay.toISOString();",
									"",
									"let today = new Date();",
									"let startDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0 ,0, 0);",
									"let start_today= startDay.toISOString();",
									"console.log(\"start_today: \" + start_today);",
									"",
									"let endDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59 ,59, 0);",
									"let end_today= endDay.toISOString();",
									"console.log(\"end_today: \" + end_today);",
									"",
									"pm.environment.set(\"C-start_today\",start_today);",
									"pm.environment.set(\"C-end_today\",end_today);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    const jsData = pm.response.json();",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let total_po = null;",
									"    switch(testcase){",
									"        case 4:",
									"            try {",
									"                total_po = jsData.meta.total_rows;",
									"            } catch {",
									"                console.log(\"Missing meta\");",
									"            }",
									"",
									"            pm.test(\"Got total po \" + total_po, function () {",
									"                pm.expect(total_po != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-total_po\",total_po);",
									"",
									"            let stocktake_id = null;",
									"            for(let item in jsData.data){",
									"                if(jsData.data[item].status == \"processing\"){",
									"                    stocktake_id = jsData.data[item].id;",
									"                    break;",
									"                }",
									"            }",
									"",
									"            pm.test(\"Got stocktake_id: \" + stocktake_id, function () {",
									"                pm.expect(stocktake_id != null).to.be.true;",
									"            });",
									"            pm.environment.set(\"C-stocktake_id\",stocktake_id);",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"view_po_detail\"); //view_po_detail",
									"            break;",
									"        case 7:",
									"            // check",
									"            // total PO ko đổi",
									"            let old_total_po = pm.environment.get(\"C-total_po\");",
									"            total_po = jsData.meta.total_rows;",
									"",
									"            pm.test(\"Total PO is not change\", function () {",
									"                pm.expect(old_total_po == total_po).to.be.true;",
									"            });",
									"",
									"            // tatus = completed",
									"            let total_quantity, status;",
									"            pm.test(\"Found PO with id is \" + pm.environment.get(\"C-stocktake_id\"), function () {",
									"                let isFound = false;",
									"                for(let item in jsData.data){",
									"                    if(pm.environment.get(\"C-stocktake_id\") == jsData.data[item].id){",
									"                        isFound = true;",
									"                        total_quantity = jsData.data[item].total_quantity;",
									"                        status = jsData.data[item].status;",
									"                        break;",
									"                    }",
									"                }",
									"                pm.expect(isFound).to.be.true;",
									"            });",
									"",
									"            // status",
									"            pm.test(\"status is cancelled\", function () {",
									"                pm.expect(status == \"cancelled\").to.be.true;",
									"            });",
									"",
									"            // tổng chênh lệch total_quantity",
									"            let stocktake_obj = pm.environment.get(\"C-stocktake_obj\");",
									"            pm.test(\"total_quantity is \" + stocktake_obj.total_quantity, function () {",
									"                pm.expect(stocktake_obj.total_quantity == total_quantity).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"view_po_detail\");",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"    ",
									"} else {",
									"    console.log(\"Can't get po list in today, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sbh_base_url}}/ms-warehouse-management/api/v2/purchase-order/get-list?business_id={{C-business_id}}&start_time={{C-start_today}}&end_time={{C-end_today}}&page=1&page_size=30&po_type=&sort=created_at desc",
							"host": [
								"{{sbh_base_url}}"
							],
							"path": [
								"ms-warehouse-management",
								"api",
								"v2",
								"purchase-order",
								"get-list"
							],
							"query": [
								{
									"key": "business_id",
									"value": "{{C-business_id}}"
								},
								{
									"key": "start_time",
									"value": "{{C-start_today}}",
									"description": "2023-06-25T17:00:00Z"
								},
								{
									"key": "end_time",
									"value": "{{C-end_today}}",
									"description": "2023-06-26T16:59:59Z"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "page_size",
									"value": "30"
								},
								{
									"key": "po_type",
									"value": "",
									"description": "other => kiểm kho"
								},
								{
									"key": "sort",
									"value": "created_at desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "view_po_detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    let jsData = pm.response.json();",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"    let stocktake_obj = null;",
									"    let list_sku_stocktake = [];",
									"",
									"    switch(testcase){",
									"        case 5:",
									"            // get data",
									"            for(let item in jsData.data.list_item){",
									"                list_sku_stocktake[list_sku_stocktake.length] = {",
									"                    \"sku_id\":jsData.data.list_item[item].id,",
									"                    \"normal_price\":jsData.data.list_item[item].normal_price,",
									"                    \"pricing\":jsData.data.list_item[item].pricing,",
									"                    \"quantity\":jsData.data.list_item[item].quantity,",
									"                    \"transaction_type\":jsData.data.list_item[item].transaction_type,",
									"                    \"before_change_quantity\":jsData.data.list_item[item].before_change_quantity,",
									"                    \"after_change_quantity\":jsData.data.list_item[item].after_change_quantity",
									"                }",
									"            }",
									"",
									"            /**",
									"             * total_before_change_quantity & total_after_change_quantity được hệ thống tính lúc tạo stocktake, sẽ không chính xác, cần được tính lại theo list_item mà client gửi lên lúc update (case 7)",
									"             * cần gọi lại hệ thống trước khi update => lấy data mới nhất (khả năng lỗi khi có nhiều phiếu kiểm kho rồi mới bắt đầu update)",
									"            */  ",
									"            stocktake_obj = {",
									"                \"stocktake_id\":jsData.data.id,",
									"                \"po_code\":jsData.data.po_code,",
									"                \"total_items\":jsData.data.total_items,",
									"                \"list_item\":list_sku_stocktake,",
									"                \"status\":jsData.data.status,",
									"                \"total_quantity\":jsData.data.total_quantity,",
									"                \"total_before_change_quantity\":jsData.data.total_before_change_quantity,",
									"                \"total_after_change_quantity\":jsData.data.total_after_change_quantity",
									"            }",
									"",
									"            pm.test(\"total_quantity is correctly!!!\", function () {",
									"                console.log(\"Expected: \" + (stocktake_obj.total_after_change_quantity - stocktake_obj.total_before_change_quantity));",
									"                console.log(\"Actual: \" + stocktake_obj.total_quantity);",
									"                pm.expect(stocktake_obj.total_after_change_quantity - stocktake_obj.total_before_change_quantity == stocktake_obj.total_quantity).to.be.true;",
									"            });",
									"",
									"            pm.environment.set(\"C-stocktake_obj\",stocktake_obj);",
									"            console.log(\"PO obj before update: \" + JSON.stringify(stocktake_obj));",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"update_stocktake\"); // update_stocktake",
									"            break;",
									"        case 7:",
									"            // check",
									"            // total_items",
									"            stocktake_obj = pm.environment.get(\"C-stocktake_obj\");",
									"            console.log(\"Debug: \" + JSON.stringify(stocktake_obj));",
									"            console.log(\"response: \" + JSON.stringify(jsData));",
									"            pm.test(\"total_items must be \" + stocktake_obj.total_items, function () {",
									"                pm.expect(jsData.data.total_items == stocktake_obj.total_items).to.be.true;",
									"            });",
									"",
									"            // total_quantity",
									"            // total_amount",
									"",
									"            // status",
									"            pm.test(\"status must be cancelled\", function () {",
									"                pm.expect(jsData.data.status == \"cancelled\").to.be.true;",
									"            });",
									"",
									"            // list_item",
									"            list_sku_stocktake = stocktake_obj.list_item;",
									"            let expected_list_item = [];",
									"            for(let i in list_sku_stocktake){",
									"                expected_list_item[expected_list_item.length] = {",
									"                    \"sku_id\":list_sku_stocktake[i].sku_id,",
									"                    \"before_change_quantity\":list_sku_stocktake[i].before_change_quantity,",
									"                    \"after_change_quantity\":list_sku_stocktake[i].after_change_quantity",
									"                }",
									"            }",
									"",
									"            let actual_list_item = [];",
									"            for(let j in jsData.data.list_item){",
									"                actual_list_item[actual_list_item.length] = {",
									"                    \"sku_id\":jsData.data.list_item[j].id,",
									"                    \"before_change_quantity\":jsData.data.list_item[j].before_change_quantity,",
									"                    \"after_change_quantity\":jsData.data.list_item[j].after_change_quantity",
									"                }",
									"            }",
									"            pm.test(\"list_item is correctly!!!\", function () {",
									"                console.log(\"Expected: \" + JSON.stringify(expected_list_item));",
									"                console.log(\"Actual: \" + JSON.stringify(actual_list_item));",
									"                pm.expect(JSON.stringify(expected_list_item) == JSON.stringify(actual_list_item)).to.be.true;",
									"            });",
									"",
									"            // total_before_change_quantity => tính lại theo list_item",
									"            let total_before_change_quantity = 0, total_after_change_quantity = 0;",
									"            // total_before_change_quantity = stocktake_obj.total_before_change_quantity;",
									"            // total_after_change_quantity = stocktake_obj.total_after_change_quantity;",
									"            for(let item in list_sku_stocktake){",
									"                total_before_change_quantity += list_sku_stocktake[item].before_change_quantity;",
									"                total_after_change_quantity += list_sku_stocktake[item].after_change_quantity;",
									"            }",
									"            pm.test(\"total_before_change_quantity is \" + total_before_change_quantity, function () {",
									"                console.log(\"Expected: \" + total_before_change_quantity);",
									"                console.log(\"Actual: \" + jsData.data.total_before_change_quantity);",
									"                pm.expect(total_before_change_quantity == jsData.data.total_before_change_quantity).to.be.true;",
									"            });",
									"",
									"            // total_after_change_quantity",
									"            pm.test(\"total_after_change_quantity is \" + total_after_change_quantity, function () {",
									"                console.log(\"Expected: \" + total_after_change_quantity);",
									"                console.log(\"Actual: \" + jsData.data.total_after_change_quantity);",
									"                pm.expect(total_after_change_quantity == jsData.data.total_after_change_quantity).to.be.true;",
									"            });",
									"",
									"            postman.setNextRequest(\"check_list_products_in_stock\"); // check_list_products_in_stock",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't get po detail, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{sbh_base_url}}/ms-warehouse-management/api/v3/purchase-order/get-detail?id={{C-stocktake_id}}",
							"host": [
								"{{sbh_base_url}}"
							],
							"path": [
								"ms-warehouse-management",
								"api",
								"v3",
								"purchase-order",
								"get-detail"
							],
							"query": [
								{
									"key": "id",
									"value": "{{C-stocktake_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update_stocktake",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let testcase = pm.environment.get(\"C-testcase\");",
									"console.log(\"Testcase: \" + testcase);",
									"",
									"let status = null, po_details = [];",
									"switch(testcase){",
									"    case 6:",
									"        let stocktake_obj = pm.environment.get(\"C-stocktake_obj\");",
									"        for(let item in stocktake_obj.list_item){",
									"            po_details[po_details.length] = {",
									"                \"sku_id\":stocktake_obj.list_item[item].sku_id,",
									"                \"after_change_quantity\":stocktake_obj.list_item[item].after_change_quantity",
									"            }",
									"        }",
									"",
									"        status = \"cancelled\";",
									"        break;",
									"    default:",
									"        console.log(\"Missing case\");",
									"        break;",
									"}",
									"",
									"let payload = {",
									"    \"status\":status,",
									"    \"po_details\":po_details",
									"}",
									"console.log(\"payload: \" + JSON.stringify(payload));",
									"",
									"pm.environment.set(\"C-payload\",JSON.stringify(payload));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if(pm.response.code == 201){",
									"    const jsData = pm.response.json();",
									"    let testcase = pm.environment.get(\"C-testcase\");",
									"",
									"    switch(testcase){",
									"        case 6:",
									"            // status",
									"            pm.test(\"status update to cancelled\", function () {",
									"                pm.expect(jsData.data.status == \"cancelled\").to.be.true;",
									"            });",
									"",
									"            testcase++;",
									"            pm.environment.set(\"C-testcase\",testcase);",
									"            postman.setNextRequest(\"view_list_po\"); // view_list_po",
									"            break;",
									"        default:",
									"            console.log(\"Missing flow, end test\");",
									"            postman.setNextRequest(null);",
									"            break;",
									"    }",
									"} else {",
									"    console.log(\"Can't update stocktake, end test\");",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{C-userToken}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{C-payload}}"
						},
						"url": {
							"raw": "{{sbh_base_url}}/ms-warehouse-management/api/v1/po/update-stocktake/{{C-stocktake_id}}",
							"host": [
								"{{sbh_base_url}}"
							],
							"path": [
								"ms-warehouse-management",
								"api",
								"v1",
								"po",
								"update-stocktake",
								"{{C-stocktake_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}